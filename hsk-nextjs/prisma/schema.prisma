// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique @db.VarChar(50)
  password        String   @db.VarChar(255)
  email           String?  @db.VarChar(100)
  phone           String?  @db.VarChar(20)
  realName        String?  @db.VarChar(50) @map("real_name")
  role            UserRole @default(STUDENT)
  status          UserStatus @default(ACTIVE)
  department      String?  @db.VarChar(100)
  avatar          String?  @db.VarChar(255)
  studentId       String?  @db.VarChar(50) @map("student_id")
  grade           String?  @db.VarChar(20)
  major           String?  @db.VarChar(100)
  lastLoginTime   DateTime? @map("last_login_time")
  totalPracticeTime Int    @default(0) @map("total_practice_time")
  practiceCount   Int      @default(0) @map("practice_count")
  accuracy        Float    @default(0)
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 关联关系
  createdSubjects Subject[] @relation("CreatedByUser")
  userSubjects    UserSubject[]
  questionAnswers QuestionAnswer[]
  practiceRecords PracticeRecord[]

  @@map("users")
}

// 用户角色枚举
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

// 用户状态枚举
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// 学科表
model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  code        String   @unique @db.VarChar(50)
  description String?  @db.Text
  status      SubjectStatus @default(ACTIVE)
  createdById Int      @map("created_by_id")
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  userSubjects UserSubject[]
  questions    Question[]

  @@map("subjects")
}

// 学科状态枚举
enum SubjectStatus {
  ACTIVE
  INACTIVE
}

// 用户学科关联表
model UserSubject {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  subjectId Int      @map("subject_id")
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId])
  @@map("user_subjects")
}

// 题目表
model Question {
  id          Int      @id @default(autoincrement())
  stem        String   @db.Text
  subjectId   Int      @map("subject_id")
  type        QuestionType
  difficulty  QuestionDifficulty
  status      QuestionStatus @default(ACTIVE)
  options     Json?    // 选择题选项
  answer      String   @db.Text
  explanation String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  subject Subject @relation(fields: [subjectId], references: [id])
  questionAnswers QuestionAnswer[]

  @@map("questions")
}

// 题目类型枚举
enum QuestionType {
  SINGLE_CHOICE    // 单选题
  MULTIPLE_CHOICE  // 多选题
  FILL_BLANK      // 填空题
  SHORT_ANSWER    // 简答题
}

// 题目难度枚举
enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

// 题目状态枚举
enum QuestionStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// 用户答题记录表
model QuestionAnswer {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  questionId Int      @map("question_id")
  answer     String   @db.Text
  isCorrect  Boolean  @map("is_correct")
  timeSpent  Int      @map("time_spent") // 答题用时（秒）
  createdAt  DateTime @default(now()) @map("created_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_answers")
}

// 练习记录表
model PracticeRecord {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  subjectId   Int      @map("subject_id")
  totalQuestions Int   @map("total_questions")
  correctAnswers Int   @map("correct_answers")
  accuracy    Float
  timeSpent   Int      @map("time_spent") // 总用时（秒）
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("practice_records")
}

// 系统设置表
model SystemSetting {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String   @db.Text
  description String?  @db.VarChar(255)
  category    String   @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}
